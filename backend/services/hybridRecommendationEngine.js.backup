// backend/services/hybridRecommendationEngine.js - FIXED VERSION
// Fixed queries to actually return products

const { Pool } = require('pg');
const ontologyService = require('./ontologyService');

class HybridRecommendationEngine {
    constructor() {
        this.pool = new Pool({
            user: process.env.DB_USER || 'postgres',
            host: process.env.DB_HOST || 'localhost',
            database: process.env.DB_NAME || 'matchcare_fresh_db',
            password: process.env.DB_PASSWORD,
            port: process.env.DB_PORT || 5432,
        });
        
        this.weights = {
            ontology_reasoning: 0.4,
            database_matching: 0.3,
            safety_compatibility: 0.2,
            ingredient_synergy: 0.1
        };
    }

    async getPersonalizedRecommendations(guestProfile) {
        try {
            console.log('🎯 Starting FIXED Hybrid Recommendation Engine...');
            const startTime = Date.now();
            
            const { skin_type, concerns = [], sensitivities = [] } = guestProfile;
            
            // PHASE 1: Database Direct Matching (SIMPLIFIED & WORKING)
            console.log('💾 Phase 1: Database Product Matching (Fixed)...');
            const databaseResults = await this.getDatabaseRecommendationsFixed(skin_type, concerns, sensitivities);
            
            // PHASE 2: Basic Scoring (Skip complex ontology for now)
            console.log('⚖️ Phase 2: Basic Scoring...');
            const scoredResults = await this.scoreResults(databaseResults, guestProfile);
            
            // PHASE 3: Generate Explanations
            console.log('📝 Phase 3: Generating Explanations...');
            const enrichedResults = await this.generateExplanations(scoredResults, guestProfile);
            
            const processingTime = Date.now() - startTime;
            
            console.log(`✅ Fixed Recommendation Complete in ${processingTime}ms`);
            console.log(`📊 Results: ${enrichedResults.length} personalized recommendations`);
            
            return {
                recommendations: enrichedResults.slice(0, 12),
                metadata: {
                    total_candidates: databaseResults.length,
                    processing_time_ms: processingTime,
                    database_contribution: databaseResults.length,
                    algorithm_version: 'fixed_v1.0'
                },
                reasoning_explanation: this.generateSystemExplanation(skin_type, concerns, sensitivities)
            };
            
        } catch (error) {
            console.error('❌ Fixed Recommendation Error:', error);
            throw error;
        }
    }

    // FIXED: Simplified database query that actually works
    async getDatabaseRecommendationsFixed(skinType, concerns, sensitivities) {
        try {
            const client = await this.pool.connect();
            
            try {
                console.log(`🔍 Searching for products for ${skinType} skin...`);
                
                // SIMPLIFIED QUERY - Remove problematic conditions
                let query = `
                    SELECT 
                        p.id,
                        p.name,
                        COALESCE(b.name, p.brand, 'Unknown Brand') as brand_name,
                        p.main_category,
                        p.subcategory,
                        p.description,
                        p.alcohol_free,
                        p.fragrance_free,
                        p.paraben_free,
                        p.sulfate_free,
                        p.silicone_free,
                        p.product_url,
                        p.local_image_path
                    FROM products p
                    LEFT JOIN brands b ON p.brand_id = b.id
                    WHERE p.name IS NOT NULL
                `;
                
                const params = [];
                let paramCount = 0;
                
                // Add safety filters based on sensitivities
                if (sensitivities.includes('fragrance')) {
                    query += ` AND (p.fragrance_free = true OR p.fragrance_free IS NULL)`;
                }
                if (sensitivities.includes('alcohol')) {
                    query += ` AND (p.alcohol_free = true OR p.alcohol_free IS NULL)`;
                }
                if (sensitivities.includes('paraben')) {
                    query += ` AND (p.paraben_free = true OR p.paraben_free IS NULL)`;
                }
                if (sensitivities.includes('sulfate')) {
                    query += ` AND (p.sulfate_free = true OR p.sulfate_free IS NULL)`;
                }
                
                // Add concern-based filtering (simplified)
                if (concerns.length > 0) {
                    const concernKeywords = this.mapConcernsToKeywords(concerns);
                    if (concernKeywords.length > 0) {
                        paramCount++;
                        query += ` AND (
                            LOWER(COALESCE(p.name, '') || ' ' || COALESCE(p.description, '')) 
                            ~* $${paramCount}
                        )`;
                        params.push(`(${concernKeywords.join('|')})`);
                    }
                }
                
                // Add pagination and ordering
                query += ` ORDER BY p.name ASC LIMIT 50`;
                
                console.log('🔍 Executing query:', query);
                console.log('📋 Query params:', params);
                
                const result = await client.query(query, params);
                
                console.log(`✅ Found ${result.rows.length} products`);
                
                return result.rows.map(row => ({
                    ...row,
                    recommendation_source: 'database_fixed',
                    database_score: this.calculateBasicScore(row, skinType, concerns, sensitivities),
                    reasoning_data: {
                        safety_matches: this.getSafetyMatches(row, sensitivities),
                        concern_relevance: this.getConcernRelevance(row, concerns)
                    }
                }));
                
            } finally {
                client.release();
            }
            
        } catch (error) {
            console.error('❌ Database recommendation error:', error);
            console.error('❌ Error details:', error.message);
            return [];
        }
    }

    // Simplified scoring
    async scoreResults(products, guestProfile) {
        return products.map(product => ({
            ...product,
            hybrid_score: this.calculateSimpleScore(product, guestProfile),
            confidence_level: this.calculateSimpleConfidence(product)
        })).sort((a, b) => b.hybrid_score - a.hybrid_score);
    }

    calculateBasicScore(product, skinType, concerns, sensitivities) {
        let score = 50; // Base score
        
        // Safety bonus
        if (sensitivities.includes('fragrance') && product.fragrance_free) score += 15;
        if (sensitivities.includes('alcohol') && product.alcohol_free) score += 15;
        if (sensitivities.includes('paraben') && product.paraben_free) score += 15;
        if (sensitivities.includes('sulfate') && product.sulfate_free) score += 15;
        
        // Content relevance
        const productText = `${product.name || ''} ${product.description || ''}`.toLowerCase();
        const concernKeywords = this.mapConcernsToKeywords(concerns);
        
        concernKeywords.forEach(keyword => {
            if (productText.includes(keyword.toLowerCase())) {
                score += 5;
            }
        });
        
        // Category bonus
        if (product.main_category) {
            score += 5;
        }
        
        return Math.min(100, score);
    }

    calculateSimpleScore(product, guestProfile) {
        return product.database_score || 50;
    }

    calculateSimpleConfidence(product) {
        const hasDescription = Boolean(product.description);
        const hasBrand = Boolean(product.brand_name && product.brand_name !== 'Unknown Brand');
        const hasCategory = Boolean(product.main_category);
        
        if (hasDescription && hasBrand && hasCategory) return 'high';
        if ((hasDescription || hasBrand) && hasCategory) return 'medium';
        return 'low';
    }

    // Helper methods
    mapConcernsToKeywords(concerns) {
        const concernMap = {
            'acne': ['acne', 'blemish', 'salicylic', 'benzoyl peroxide', 'jerawat'],
            'wrinkles': ['anti-aging', 'retinol', 'peptide', 'collagen', 'kerutan'],
            'dark_spots': ['brightening', 'vitamin c', 'kojic', 'arbutin', 'flek'],
            'dryness': ['moisturizing', 'hydrating', 'hyaluronic', 'ceramide', 'kering'],
            'sensitivity': ['gentle', 'sensitive', 'soothing', 'calming', 'sensitif'],
            'pores': ['pore', 'blackhead', 'whitehead', 'komedo', 'pori']
        };
        
        return concerns.flatMap(concern => 
            concernMap[concern.toLowerCase()] || [concern]
        );
    }

    getSafetyMatches(product, sensitivities) {
        const matches = [];
        
        if (sensitivities.includes('fragrance') && product.fragrance_free) {
            matches.push('fragrance-free');
        }
        if (sensitivities.includes('alcohol') && product.alcohol_free) {
            matches.push('alcohol-free');
        }
        if (sensitivities.includes('paraben') && product.paraben_free) {
            matches.push('paraben-free');
        }
        if (sensitivities.includes('sulfate') && product.sulfate_free) {
            matches.push('sulfate-free');
        }
        
        return matches;
    }

    getConcernRelevance(product, concerns) {
        const productText = `${product.name || ''} ${product.description || ''}`.toLowerCase();
        const keywords = this.mapConcernsToKeywords(concerns);
        
        if (keywords.length === 0) return 0;
        
        const matchingKeywords = keywords.filter(keyword => 
            productText.includes(keyword.toLowerCase())
        );
        
        return matchingKeywords.length / keywords.length;
    }

    generateExplanations(products, guestProfile) {
        return products.map(product => ({
            ...product,
            explanation: this.buildSimpleExplanation(product, guestProfile),
            recommendation_reasons: this.buildSimpleReasons(product, guestProfile)
        }));
    }

    buildSimpleExplanation(product, guestProfile) {
        const reasons = [];
        
        if (product.reasoning_data?.safety_matches?.length > 0) {
            reasons.push(`🛡️ Safe choice: ${product.reasoning_data.safety_matches.join(', ')}`);
        }
        
        if (product.main_category) {
            reasons.push(`📂 ${product.main_category} product`);
        }
        
        if (product.concern_relevance > 0.3) {
            reasons.push(`🎯 Relevant for your concerns`);
        }
        
        if (reasons.length === 0) {
            reasons.push(`✨ Compatible with ${guestProfile.skin_type} skin`);
        }
        
        return reasons.join(' • ');
    }

    buildSimpleReasons(product, guestProfile) {
        return {
            safety_compatibility: product.reasoning_data?.safety_matches || [],
            concern_relevance: product.reasoning_data?.concern_relevance || 0,
            overall_score: product.hybrid_score,
            confidence: product.confidence_level
        };
    }

    generateSystemExplanation(skinType, concerns, sensitivities) {
        return {
            approach: "Fixed database-based recommendation system",
            reasoning: `Direct database matching for ${skinType} skin`,
            factors_considered: [
                "Product-ingredient database mappings", 
                "Safety compatibility with sensitivities",
                "Concern-specific keyword matching",
                "Product category relevance"
            ],
            personalization: {
                skin_type: skinType,
                concerns: concerns,
                sensitivities: sensitivities
            },
            note: "Simplified version to ensure working recommendations"
        };
    }
}

module.exports = new HybridRecommendationEngine();